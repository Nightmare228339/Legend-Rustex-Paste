//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\Наталья\Desktop\project\Decompile\DeobfMineObf\1.12 stable mappings"!

//Decompiled by Procyon!

package com.cookie.legendmod.module.EXPLOIT;

import com.cookie.legendmod.module.*;
import net.minecraft.client.network.*;
import com.cookie.legendmod.*;
import yea.bushroot.clickgui.*;
import com.cookie.legendmod.utils.*;
import net.minecraftforge.fml.common.gameevent.*;
import com.cookie.legendmod.utils.commands.*;
import net.minecraftforge.fml.common.eventhandler.*;
import java.util.*;
import net.minecraftforge.fml.relauncher.*;
import com.google.common.collect.*;
import net.minecraft.world.*;
import net.minecraft.scoreboard.*;

public class OfflineCheck extends Module
{
    public TimerUtils timer;
    private static NetHandlerPlayClient nethandlerplayclient;
    private static Ordering<NetworkPlayerInfo> ENTRY_ORDERING;
    private static List<NetworkPlayerInfo> list;
    public static Set<String> offlined;
    private static boolean flag;
    private static boolean flag_say;
    
    public OfflineCheck() {
        super("OfflineCheck", 0, Category.EXPLOIT);
        this.timer = new TimerUtils();
        Legendmod.instance.settingsManager.rSetting(new Setting("Time", (Module)this, 1.0, 1.0, 600.0, true));
    }
    
    @Override
    public void onDisable() {
        OfflineCheck.offlined.clear();
        OfflineCheck.flag_say = false;
        OfflineCheck.flag = false;
        super.onDisable();
    }
    
    public static List<NetworkPlayerInfo> getList() {
        return OfflineCheck.list;
    }
    
    public static String check(final String name) {
        if (OfflineCheck.list.isEmpty()) {
            ChatUtils.sendMessage("pls enable OfflineCheck");
            return null;
        }
        for (final NetworkPlayerInfo ii : OfflineCheck.list) {
            if (ii.getGameProfile().getName().equals(name)) {
                return name + " online";
            }
        }
        return name + " offline";
    }
    
    @SubscribeEvent
    public void onPlayerTick(final TickEvent.PlayerTickEvent e) {
        final int time = (int)Legendmod.instance.settingsManager.getSettingByName(this.name, "Time").getValDouble();
        if (this.timer.isDelay(time * 1000L)) {
            OfflineCheck.nethandlerplayclient = OfflineCheck.mc.player.connection;
            OfflineCheck.ENTRY_ORDERING = (Ordering<NetworkPlayerInfo>)Ordering.from((Comparator)new PlayerComparator());
            OfflineCheck.list = (List<NetworkPlayerInfo>)OfflineCheck.ENTRY_ORDERING.sortedCopy((Iterable)OfflineCheck.nethandlerplayclient.getPlayerInfoMap());
            for (final String ii : CommandOffline.getNick()) {
                for (final NetworkPlayerInfo info : OfflineCheck.list) {
                    if (ii.equals(info.getGameProfile().getName())) {
                        OfflineCheck.flag_say = false;
                        OfflineCheck.flag = false;
                        break;
                    }
                    OfflineCheck.flag = true;
                }
                if (OfflineCheck.flag && !OfflineCheck.offlined.contains(ii)) {
                    OfflineCheck.flag_say = false;
                    OfflineCheck.offlined.add(ii);
                }
                else {
                    if (!OfflineCheck.offlined.contains(ii)) {
                        continue;
                    }
                    if (OfflineCheck.flag) {
                        continue;
                    }
                    OfflineCheck.flag_say = false;
                    OfflineCheck.offlined.remove(ii);
                    ChatUtils.sendMessage(ii + " has come back online");
                }
            }
            if (OfflineCheck.offlined.size() == CommandOffline.getNick().size() && !OfflineCheck.flag_say && OfflineCheck.offlined.size() != 0) {
                ChatUtils.sendMessage(OfflineCheck.offlined.toString() + " all offline");
                OfflineCheck.flag_say = true;
            }
            this.timer.setLastMS();
        }
    }
    
    static {
        OfflineCheck.offlined = new HashSet<String>();
        OfflineCheck.flag = false;
        OfflineCheck.flag_say = false;
    }
    
    @SideOnly(Side.CLIENT)
    static class PlayerComparator implements Comparator<NetworkPlayerInfo>
    {
        private PlayerComparator() {
        }
        
        @Override
        public int compare(final NetworkPlayerInfo p_compare_1_, final NetworkPlayerInfo p_compare_2_) {
            final ScorePlayerTeam scoreplayerteam = p_compare_1_.getPlayerTeam();
            final ScorePlayerTeam scoreplayerteam2 = p_compare_2_.getPlayerTeam();
            return ComparisonChain.start().compareTrueFirst(p_compare_1_.getGameType() != GameType.SPECTATOR, p_compare_2_.getGameType() != GameType.SPECTATOR).compare((Comparable)((scoreplayerteam != null) ? scoreplayerteam.getName() : ""), (Comparable)((scoreplayerteam2 != null) ? scoreplayerteam2.getName() : "")).compare((Comparable)p_compare_1_.getGameProfile().getName(), (Comparable)p_compare_2_.getGameProfile().getName()).result();
        }
    }
}
