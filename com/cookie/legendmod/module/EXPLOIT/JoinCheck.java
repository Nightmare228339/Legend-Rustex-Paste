//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\Наталья\Desktop\project\Decompile\DeobfMineObf\1.12 stable mappings"!

//Decompiled by Procyon!

package com.cookie.legendmod.module.EXPLOIT;

import com.cookie.legendmod.module.*;
import net.minecraft.client.network.*;
import com.cookie.legendmod.*;
import yea.bushroot.clickgui.*;
import net.minecraftforge.fml.common.gameevent.*;
import net.minecraft.util.text.*;
import com.cookie.legendmod.utils.*;
import net.minecraftforge.fml.common.eventhandler.*;
import java.util.*;
import net.minecraftforge.fml.relauncher.*;
import com.google.common.collect.*;
import net.minecraft.world.*;
import net.minecraft.scoreboard.*;

public class JoinCheck extends Module
{
    public TimerUtils timer;
    private static NetHandlerPlayClient nethandlerplayclient;
    private static Ordering<NetworkPlayerInfo> ENTRY_ORDERING;
    private static List<NetworkPlayerInfo> list;
    public static Set<String> old_list;
    public static Set<String> new_list;
    
    public JoinCheck() {
        super("JoinCheck", 0, Category.EXPLOIT);
        this.timer = new TimerUtils();
        Legendmod.instance.settingsManager.rSetting(new Setting("Time", (Module)this, 1.0, 1.0, 600.0, true));
        Legendmod.instance.settingsManager.rSetting(new Setting("Hi", (Module)this, false));
        Legendmod.instance.settingsManager.rSetting(new Setting("Online", (Module)this, false));
    }
    
    @Override
    public void onDisable() {
        try {
            JoinCheck.list.clear();
            JoinCheck.old_list.clear();
            JoinCheck.new_list.clear();
        }
        catch (Throwable t) {}
        super.onDisable();
    }
    
    @SubscribeEvent
    public void onPlayerTick(final TickEvent.PlayerTickEvent e) {
        final int time = (int)Legendmod.instance.settingsManager.getSettingByName(this.name, "Time").getValDouble();
        if (this.timer.isDelay(time * 1000L)) {
            if (JoinCheck.mc.world == null) {
                return;
            }
            JoinCheck.nethandlerplayclient = JoinCheck.mc.player.connection;
            JoinCheck.ENTRY_ORDERING = (Ordering<NetworkPlayerInfo>)Ordering.from((Comparator)new PlayerComparator());
            JoinCheck.list = (List<NetworkPlayerInfo>)JoinCheck.ENTRY_ORDERING.sortedCopy((Iterable)JoinCheck.nethandlerplayclient.getPlayerInfoMap());
            for (final NetworkPlayerInfo playerInfo : JoinCheck.list) {
                JoinCheck.new_list.add(playerInfo.getGameProfile().getName());
            }
            for (int i = 0; i < JoinCheck.old_list.size(); ++i) {
                if (!JoinCheck.new_list.contains(JoinCheck.old_list.toArray()[i])) {
                    ChatUtils.sendMessage(JoinCheck.old_list.toArray()[i] + " " + TextFormatting.RED + "leave");
                    JoinCheck.old_list.remove(JoinCheck.old_list.toArray()[i]);
                    if (Legendmod.instance.settingsManager.getSettingByName(this.name, "Online").getValBoolean()) {
                        ChatUtils.sendMessage("Online: " + TextFormatting.RED + JoinCheck.new_list.size());
                    }
                }
            }
            for (final String name : JoinCheck.new_list) {
                if (JoinCheck.old_list.contains(name)) {
                    continue;
                }
                if (JoinCheck.old_list.isEmpty()) {
                    JoinCheck.old_list.addAll(JoinCheck.new_list);
                    break;
                }
                ChatUtils.sendMessage(name + " " + TextFormatting.GREEN + "join");
                JoinCheck.old_list.add(name);
                if (Legendmod.instance.settingsManager.getSettingByName(this.name, "Hi").getValBoolean()) {
                    ChatUtils.say("Hi " + name);
                }
                if (!Legendmod.instance.settingsManager.getSettingByName(this.name, "Online").getValBoolean()) {
                    continue;
                }
                ChatUtils.sendMessage("Online: " + TextFormatting.GREEN + JoinCheck.new_list.size());
            }
            JoinCheck.new_list.clear();
            this.timer.setLastMS();
        }
    }
    
    static {
        JoinCheck.old_list = new HashSet<String>();
        JoinCheck.new_list = new HashSet<String>();
    }
    
    @SideOnly(Side.CLIENT)
    static class PlayerComparator implements Comparator<NetworkPlayerInfo>
    {
        private PlayerComparator() {
        }
        
        @Override
        public int compare(final NetworkPlayerInfo p_compare_1_, final NetworkPlayerInfo p_compare_2_) {
            final ScorePlayerTeam scoreplayerteam = p_compare_1_.getPlayerTeam();
            final ScorePlayerTeam scoreplayerteam2 = p_compare_2_.getPlayerTeam();
            return ComparisonChain.start().compareTrueFirst(p_compare_1_.getGameType() != GameType.SPECTATOR, p_compare_2_.getGameType() != GameType.SPECTATOR).compare((Comparable)((scoreplayerteam != null) ? scoreplayerteam.getName() : ""), (Comparable)((scoreplayerteam2 != null) ? scoreplayerteam2.getName() : "")).compare((Comparable)p_compare_1_.getGameProfile().getName(), (Comparable)p_compare_2_.getGameProfile().getName()).result();
        }
    }
}
